#include <ros/ros.h>
#include <iostream>
// MoveIt! IK solve 
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_state/robot_state.h>

// MoveIt! move group interface
#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>
#include <moveit_visual_tools/moveit_visual_tools.h>

int main(int argc, char** argv)
{
  // initialize node 
  ros::init(argc, argv, "move_legs");
  // node objedt node_handle
  //ros::NodeHandle node_handle;
  //ros::Rate r(10);
  ros::AsyncSpinner spinner(1);
  spinner.start();
  // initialize moveit planning scene interface
  moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
  // initialize moveit group 
  static const std::string LEGs_GROUP = "LEGs";
  static const std::string LLEG_GROUP = "LLEG";
  static const std::string RLEG_GROUP = "RLEG";
  moveit::planning_interface::MoveGroupInterface legs_move_group(LEGs_GROUP);
  moveit::planning_interface::MoveGroupInterface lleg_move_group(LLEG_GROUP);
  moveit::planning_interface::MoveGroupInterface rleg_move_group(RLEG_GROUP);
  // get current robot state
  const robot_state::JointModelGroup* legs_group = legs_move_group.getCurrentState()->getJointModelGroup(LEGs_GROUP);
  const robot_state::JointModelGroup* lleg_group = legs_move_group.getCurrentState()->getJointModelGroup(LLEG_GROUP);
  const robot_state::JointModelGroup* rleg_group = legs_move_group.getCurrentState()->getJointModelGroup(RLEG_GROUP);
 
  // initialize names of joint group
  const std::vector<std::string>& lleg_joint_names = lleg_group->getVariableNames();
  const std::vector<std::string>& rleg_joint_names = rleg_group->getVariableNames();
  const std::vector<std::string>& legs_joint_names = legs_group->getVariableNames();
     
  // initialize current joint positions 
  std::vector<double> lleg_joint_values;
  std::vector<double> rleg_joint_values;
  std::vector<double> legs_joint_values;
  
 
  while (ros::ok()){
    moveit::core::RobotStatePtr current_state = legs_move_group.getCurrentState();
    
    current_state->copyJointGroupPositions(lleg_group, lleg_joint_values);
    current_state->copyJointGroupPositions(rleg_group, rleg_joint_values);
    current_state->copyJointGroupPositions(legs_group, legs_joint_values);
    
    // get current eef pose 
    const Eigen::Affine3d& lleg_eef_state = current_state->getGlobalLinkTransform("LLEG_l2");
    const Eigen::Affine3d& rleg_eef_state = current_state->getGlobalLinkTransform("RLEG_l2");
    // set goal pose  
    Eigen::Affine3d ltest = Eigen::Affine3d::Identity();
    ltest.translation() = lleg_eef_state.translation();
  
    Eigen::Affine3d rtest = Eigen::Affine3d::Identity();
    rtest.translation() = rleg_eef_state.translation();
    
    ROS_INFO("Input w/s for +/-z, a/d for +/-x");
    std::string str;
    std::cin>>str;
    bool dol = false;
    
    double z_step = 0.03;
    double x_step = 0.03;
    if (str=="w"){
      ltest.translation().z() -= z_step;
      rtest.translation().z() -= z_step;
      dol = true;
    }
    if (str=="s"){
      ltest.translation().z() += z_step;
      rtest.translation().z() += z_step;
      dol = true;
    }
    if (str=="a"){
      ltest.translation().x() -= x_step;
      rtest.translation().x() -= x_step;
      dol = true;
    }
    if (str=="d"){
      ltest.translation().x() += x_step;
      rtest.translation().x() += x_step;
      dol = true;
    }
    if (dol){
      if (ltest.translation().z() < 0.4){
        // solve IK 
        std::size_t attempts = 10;
        double timeout = 0.1;
        bool found_ik_lleg = current_state->setFromIK(lleg_group, ltest, attempts, timeout);
        bool found_ik_rleg = current_state->setFromIK(rleg_group, rtest, attempts, timeout);
        current_state->enforceBounds();
      
        // Now, we can print out the IK solution (if found):
        if (found_ik_lleg && found_ik_rleg){
          current_state->copyJointGroupPositions(lleg_group, lleg_joint_values);
          current_state->copyJointGroupPositions(rleg_group, rleg_joint_values);
          for (std::size_t i = 0; i < lleg_joint_names.size(); ++i){
            legs_joint_values[i] = lleg_joint_values[i];
            legs_joint_values[i+lleg_joint_names.size()] = rleg_joint_values[i];
          }
          for (std::size_t i = 0; i < legs_joint_names.size(); ++i){
            ROS_INFO("Joint %s: %f", legs_joint_names[i].c_str(), legs_joint_values[i]);
          }
        }
        else{
          ROS_INFO("Did not find IK solution, perhaps outside the work space");
        }
        
        legs_move_group.setJointValueTarget(legs_joint_values);
        moveit::planning_interface::MoveGroupInterface::Plan my_plan;
      
        bool success = (legs_move_group.plan(my_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
        ROS_INFO_NAMED("tutorial", "Visualizing plan 1 (pose goal) %s", success ? "" : "FAILED");
      
        legs_move_group.move();
      }
      else{
        ROS_INFO("Reach the height limit\n");
      }
    }
    else{
      ROS_INFO("Input the right instruction! \n");
    }
    spinner.start();
  }
  ros::shutdown;
  return 0;

}
